import { z } from "zod";

// üîπ Schema cho login
export const loginSchema = z.object({
  username: z
    .string()
    .min(3, "T√†i kho·∫£n ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±")
    .max(50, "T√†i kho·∫£n kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±"),
  password: z
    .string()
    .min(6, "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±")
    .max(100, "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±"),
});

// üîπ Schema cho register
export const registerSchema = z
  .object({
    username: z
      .string()
      .min(3, "T√†i kho·∫£n ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±")
      .max(50, "T√†i kho·∫£n kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±"),
    password: z
      .string()
      .min(6, "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±")
      .max(100, "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±"),
    confirmPassword: z
      .string()
      .min(6, "X√°c nh·∫≠n m·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±")
      .max(100, "X√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±"),
    fullName: z
      .string()
      .min(2, "H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±")
      .max(100, "H·ªç t√™n kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±"),
    phone: z
      .string()
      .regex(/^(0|\+84)(\d{9})$/, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá"),
    email: z
      .string()
      .email("Email kh√¥ng h·ª£p l·ªá"),
  })
  .refine((data) => data.password === data.confirmPassword, {
    path: ["confirmPassword"], // b√°o l·ªói v√†o field confirmPassword
    message: "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp",
  });

// üîπ Export type ƒë·ªÉ d√πng trong code
export type LoginInput = z.infer<typeof loginSchema>;
export type RegisterInput = z.infer<typeof registerSchema>;
